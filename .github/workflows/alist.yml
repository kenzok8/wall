name: "alist & adguardhome"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: "0 */8 * * *"
env:
  TZ: Asia/Shanghai

jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          sudo timedatectl set-timezone "$TZ"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
        
      - name: SSH connection to Actions
        uses: kenzok78/ssh-action@master
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

  # 串行执行alist相关包，避免同时修改同一个Makefile，然后自动提交
  job_auto_update_alist:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-alist-packages
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Update alist
        run: |
          cd $GITHUB_WORKSPACE/alist
          Old_PKG_VERSION=$(sed -n '10p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(curl -sL "https://api.github.com/repos/AlistGo/alist/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          
          echo "alist当前版本: $Old_PKG_VERSION"
          echo "alist最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" != "$New_PKG_VERSION" ]; then
            echo "更新alist到版本: $New_PKG_VERSION"
            sed -i "10c PKG_VERSION:=$New_PKG_VERSION" Makefile
            
            cd ~/pack && mkdir -p alist && cd alist
            wget https://codeload.github.com/AlistGo/alist/tar.gz/v$New_PKG_VERSION
            PKG_HASH=$(sha256sum v$New_PKG_VERSION | awk '{print $1}')
            
            cd $GITHUB_WORKSPACE/alist
            sed -i "16c PKG_HASH:=$PKG_HASH" Makefile
            echo "ALIST_UPDATED=true" >> $GITHUB_ENV
            echo "ALIST_VERSION=$New_PKG_VERSION" >> $GITHUB_ENV
          else
            echo "alist版本为最新版本,无需更新"
            echo "ALIST_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Update alist-web
        run: |
          sleep 1
          cd $GITHUB_WORKSPACE/alist
          Old_WEB_VERSION=$(sed -n '11p' Makefile | awk -F '=' '{print $2}')
          New_WEB_VERSION=$(curl -sL "https://api.github.com/repos/AlistGo/alist-web/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
          
          echo "alist-web当前版本: $Old_WEB_VERSION"
          echo "alist-web最新版本: $New_WEB_VERSION"
          
          if [ "$Old_WEB_VERSION" != "$New_WEB_VERSION" ]; then
            echo "更新alist-web到版本: $New_WEB_VERSION"
            sed -i "11c PKG_WEB_VERSION:=$New_WEB_VERSION" Makefile
            
            cd ~/pack && mkdir -p alist-web && cd alist-web
            wget https://github.com/AlistGo/alist-web/releases/download/$New_WEB_VERSION/dist.tar.gz
            WEB_HASH=$(sha256sum dist.tar.gz | awk '{print $1}')
            
            cd $GITHUB_WORKSPACE/alist
            sed -i "26c   HASH:=$WEB_HASH" Makefile
            echo "ALIST_WEB_UPDATED=true" >> $GITHUB_ENV
            echo "ALIST_WEB_VERSION=$New_WEB_VERSION" >> $GITHUB_ENV
          else
            echo "alist-web版本为最新版本,无需更新"
            echo "ALIST_WEB_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push alist Changes
        if: env.ALIST_UPDATED == 'true' || env.ALIST_WEB_UPDATED == 'true'
        run: |
          cd $GITHUB_WORKSPACE
          
          # 配置git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # 检查是否有变更
          if [ -n "$(git status --porcelain)" ]; then
            echo "检测到alist相关文件变更，准备提交..."
            git add alist/Makefile
            
            # 生成提交信息
            commit_msg=""
            if [ "$ALIST_UPDATED" = "true" ] && [ "$ALIST_WEB_UPDATED" = "true" ]; then
              commit_msg="alist: update to $ALIST_VERSION, alist-web: update to $ALIST_WEB_VERSION"
            elif [ "$ALIST_UPDATED" = "true" ]; then
              commit_msg="alist: update to $ALIST_VERSION"
            elif [ "$ALIST_WEB_UPDATED" = "true" ]; then
              commit_msg="alist-web: update to $ALIST_WEB_VERSION"
            fi
            
            git commit -m "$commit_msg"
            git push origin main
            echo "✅ 已成功提交并推送alist更改: $commit_msg"
          else
            echo "没有检测到alist相关文件变更"
          fi

  # 自动提交其他所有包的更新
  job_auto_update_packages:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-${{ matrix.pakcages }} 
    strategy:
      fail-fast: false
      matrix:
        pakcages: [adguardhome,adguardhome-frontend,v2raya,v2raya-web]
        include:
          - pakcages: adguardhome
            folder: adguardhome
            version_line: 9
            hash_line: 14
            version_head: PKG_VERSION:=
            hash_head: \PKG_HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://codeload.github.com/AdguardTeam/AdGuardHome/tar.gz/v
            file_name: 

          - pakcages: adguardhome-frontend
            folder: adguardhome
            version_line: 9
            hash_line: 61
            version_head: PKG_VERSION:=
            hash_head: \        HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://github.com/AdguardTeam/AdGuardHome/releases/download/v
            file_name: /AdGuardHome_frontend.tar.gz

          - pakcages: v2raya
            folder: v2raya
            version_line: 8
            hash_line: 13
            version_head: PKG_VERSION:=
            hash_head: \PKG_HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/v2rayA/v2rayA/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://codeload.github.com/v2rayA/v2rayA/tar.gz/v
            file_name: 	

          - pakcages: v2raya-web
            folder: v2raya
            version_line: 8
            hash_line: 63
            version_head: PKG_VERSION:=
            hash_head: \	HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/v2rayA/v2rayA/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://github.com/v2rayA/v2rayA/releases/download/v
            file_name: /web.tar.gz

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Check ${{ matrix.pakcages }}
        id: check
        run: |
          is_continue=true

          if [ "$is_continue" = "true" ]; then
            cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }}
            if [ ! -n "${{ matrix.version_line }}" ] ; then
              Old_PKG_VERSION=$(sed -n '/^${{ matrix.version_head }}/p' Makefile | awk -F '=' '{print $2}');
            else
              Old_PKG_VERSION=$(sed -n '${{ matrix.version_line }}p' Makefile | awk -F '=' '{print $2}');
            fi
            New_PKG_VERSION=$(${{ matrix.release_api_command }})
            echo "${{ matrix.pakcages }}当前版本: $Old_PKG_VERSION"
            echo "${{ matrix.pakcages }}最新版本: $New_PKG_VERSION"
            if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ]; then 
              echo "status=failure" >> $GITHUB_OUTPUT; 
              echo "${{ matrix.pakcages }}版本为最新版本$New_PKG_VERSION,无需更新"; 
            else 
              echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  
              echo "status=success" >> $GITHUB_OUTPUT;
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT;
          fi

      - name: Update ${{ matrix.pakcages }}
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }}
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          if [ ! -n "${{ matrix.version_line }}" ] ; then
            sed -i "/^${{ matrix.version_head }}/c\${{ matrix.version_head }}$New_PKG_VERSION" Makefile;
          else
            sed -i "${{ matrix.version_line }}c ${{ matrix.version_head }}$New_PKG_VERSION" Makefile;
          fi
          cd && cd pack && mkdir -p ${{ matrix.pakcages }} && cd ${{ matrix.pakcages }}
          wget -P / ${{ matrix.release_download_url }}$New_PKG_VERSION${{ matrix.file_name }}
          file_name=${{ matrix.file_name }}

          is_v=$(echo ${{ matrix.release_download_url }} | awk -F/ '{print $NF}')

          if [ ! -n "${{ matrix.file_name }}" ]; then PKG_HASH=$(sha256sum $is_v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}; else PKG_HASH=$(sha256sum ${file_name##*/}) && PKG_HASH=${PKG_HASH%% *}; fi;
          cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }} 
          if [ ! -n "${{ matrix.hash_line }}" ] ; then
            sed -i "/^${{ matrix.hash_head }}/c\${{ matrix.hash_head }}$PKG_HASH" Makefile;
          else
            sed -i "${{ matrix.hash_line }}c ${{ matrix.hash_head }}$PKG_HASH" Makefile;
          fi
          echo "已更新${{ matrix.pakcages }}版本到: $New_PKG_VERSION"
          echo "${{ matrix.pakcages }} Hash:$PKG_HASH"
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and Push ${{ matrix.pakcages }} Changes
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd $GITHUB_WORKSPACE
          
          # 配置git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # 检查是否有变更
          if [ -n "$(git status --porcelain)" ]; then
            echo "检测到${{ matrix.pakcages }}文件变更，准备提交..."
            git add ${{ matrix.folder }}/Makefile
            git commit -m "${{ matrix.pakcages }}: update to ${{ steps.update.outputs.version }}"
            git push origin main
            echo "✅ 已成功提交并推送 ${{ matrix.pakcages }} 更改到版本 ${{ steps.update.outputs.version }}"
          else
            echo "没有检测到${{ matrix.pakcages }}文件变更"
          fi
