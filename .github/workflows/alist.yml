name: "alist & adguardhome"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: "0 */8 * * *"
env:
  TZ: Asia/Shanghai

jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          sudo timedatectl set-timezone "$TZ"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
        
      - name: SSH connection to Actions
        uses: kenzok78/ssh-action@master
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

  # 解决方案1：将alist相关包串行执行
  job_update_alist_group:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-alist-group
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Check and Update alist
        id: alist
        run: |
          cd $GITHUB_WORKSPACE/alist
          Old_PKG_VERSION=$(sed -n '10p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(curl -sL "https://api.github.com/repos/alist-org/alist/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          
          echo "alist当前版本: $Old_PKG_VERSION"
          echo "alist最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" != "$New_PKG_VERSION" ]; then
            echo "alist_updated=true" >> $GITHUB_OUTPUT
            echo "alist_version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
            
            # 更新alist版本
            sed -i "10s/PKG_VERSION:=.*/PKG_VERSION:=$New_PKG_VERSION/" Makefile
            
            # 下载并计算hash
            cd ~/pack && mkdir -p alist && cd alist
            wget https://codeload.github.com/alist-org/alist/tar.gz/v$New_PKG_VERSION -O v$New_PKG_VERSION.tar.gz
            PKG_HASH=$(sha256sum v$New_PKG_VERSION.tar.gz | awk '{print $1}')
            
            # 更新hash
            cd $GITHUB_WORKSPACE/alist
            sed -i "16s/PKG_HASH:=.*/PKG_HASH:=$PKG_HASH/" Makefile
            echo "已更新alist版本到: $New_PKG_VERSION"
            echo "已更新alist哈希到: $PKG_HASH"
          else
            echo "alist_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Check and Update alist-web
        id: alist_web
        run: |
          cd $GITHUB_WORKSPACE/alist
          Old_WEB_VERSION=$(sed -n '11p' Makefile | awk -F '=' '{print $2}')
          New_WEB_VERSION=$(curl -sL "https://api.github.com/repos/alist-org/alist-web/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
          
          echo "alist-web当前版本: $Old_WEB_VERSION"
          echo "alist-web最新版本: $New_WEB_VERSION"
          
          if [ "$Old_WEB_VERSION" != "$New_WEB_VERSION" ]; then
            echo "web_updated=true" >> $GITHUB_OUTPUT
            echo "web_version=$New_WEB_VERSION" >> $GITHUB_OUTPUT
            
            # 更新alist-web版本
            sed -i "11s/PKG_WEB_VERSION:=.*/PKG_WEB_VERSION:=$New_WEB_VERSION/" Makefile
            
            # 下载并计算hash
            cd ~/pack && mkdir -p alist-web && cd alist-web
            wget https://github.com/alist-org/alist-web/releases/download/$New_WEB_VERSION/dist.tar.gz
            WEB_HASH=$(sha256sum dist.tar.gz | awk '{print $1}')
            
            # 更新hash - 注意这里需要匹配正确的行格式
            cd $GITHUB_WORKSPACE/alist
            sed -i "26s/.*HASH:=.*/  HASH:=$WEB_HASH/" Makefile
            echo "已更新alist-web版本到: $New_WEB_VERSION"
            echo "已更新alist-web哈希到: $WEB_HASH"
          else
            echo "web_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Create commit message
        id: message
        if: steps.alist.outputs.alist_updated == 'true' || steps.alist_web.outputs.web_updated == 'true'
        run: |
          cd ~/pack
          commit_msg=""
          pr_body=""
          pr_title=""
          
          if [ "${{ steps.alist.outputs.alist_updated }}" = "true" ] && [ "${{ steps.alist_web.outputs.web_updated }}" = "true" ]; then
            commit_msg="alist: update to ${{ steps.alist.outputs.alist_version }}, alist-web: update to ${{ steps.alist_web.outputs.web_version }}"
            pr_title="alist & alist-web: update to ${{ steps.alist.outputs.alist_version }} & ${{ steps.alist_web.outputs.web_version }}"
            pr_body="alist: update to ${{ steps.alist.outputs.alist_version }}%0Aalist-web: update to ${{ steps.alist_web.outputs.web_version }}"
            branch_name="patches-alist-combined-${{ steps.alist.outputs.alist_version }}-${{ steps.alist_web.outputs.web_version }}"
          elif [ "${{ steps.alist.outputs.alist_updated }}" = "true" ]; then
            commit_msg="alist: update to ${{ steps.alist.outputs.alist_version }}"
            pr_title="alist: update to ${{ steps.alist.outputs.alist_version }}"
            pr_body="alist: update to ${{ steps.alist.outputs.alist_version }}"
            branch_name="patches-alist-${{ steps.alist.outputs.alist_version }}"
          elif [ "${{ steps.alist_web.outputs.web_updated }}" = "true" ]; then
            commit_msg="alist-web: update to ${{ steps.alist_web.outputs.web_version }}"
            pr_title="alist-web: update to ${{ steps.alist_web.outputs.web_version }}"
            pr_body="alist-web: update to ${{ steps.alist_web.outputs.web_version }}"
            branch_name="patches-alist-web-${{ steps.alist_web.outputs.web_version }}"
          fi
          
          echo "commit_msg=$commit_msg" >> $GITHUB_OUTPUT
          echo "pr_title=$pr_title" >> $GITHUB_OUTPUT  
          echo "pr_body=$pr_body" >> $GITHUB_OUTPUT
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Check if branch exists
        id: branch_check
        if: steps.alist.outputs.alist_updated == 'true' || steps.alist_web.outputs.web_updated == 'true'
        run: |
          echo "branch_exists=$(git ls-remote --heads origin ${{ steps.message.outputs.branch_name }} | tr -d '\n')" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: (steps.alist.outputs.alist_updated == 'true' || steps.alist_web.outputs.web_updated == 'true') && steps.branch_check.outputs.branch_exists == ''
        uses: peter-evans/create-pull-request@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "${{ steps.message.outputs.commit_msg }}"
          committer: action <actions@github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: ${{ steps.message.outputs.branch_name }}
          base: main
          delete-branch: true
          title: "${{ steps.message.outputs.pr_title }}"
          body: "${{ steps.message.outputs.pr_body }}"
          labels: |
            automated-pr
          draft: false

  # 其他包继续并行执行
  job_auto_update_other_packages:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-${{ matrix.packages }} 
    strategy:
      fail-fast: false
      matrix:
        packages: [adguardhome,adguardhome-frontend,v2raya,v2raya-web]
        include:
          - packages: adguardhome
            folder: adguardhome
            version_line: 9
            hash_line: 14
            version_head: PKG_VERSION:=
            hash_head: \PKG_HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://codeload.github.com/AdguardTeam/AdGuardHome/tar.gz/v
            file_name: 

          - packages: adguardhome-frontend
            folder: adguardhome
            version_line: 9
            hash_line: 61
            version_head: PKG_VERSION:=
            hash_head: \        HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://github.com/AdguardTeam/AdGuardHome/releases/download/v
            file_name: /AdGuardHome_frontend.tar.gz

          - packages: v2raya
            folder: v2raya
            version_line: 8
            hash_line: 13
            version_head: PKG_VERSION:=
            hash_head: \PKG_HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/v2rayA/v2rayA/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://codeload.github.com/v2rayA/v2rayA/tar.gz/v
            file_name: 	

          - packages: v2raya-web
            folder: v2raya
            version_line: 8
            hash_line: 63
            version_head: PKG_VERSION:=
            hash_head: \	HASH:=
            release_api_command: curl -sL "https://api.github.com/repos/v2rayA/v2rayA/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}'
            release_download_url: https://github.com/v2rayA/v2rayA/releases/download/v
            file_name: /web.tar.gz

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Check ${{ matrix.packages }}
        id: check
        run: |
          is_continue=true

          if [ "$is_continue" = "true" ]; then
            cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }}
            if [ ! -n "${{ matrix.version_line }}" ] ; then
              Old_PKG_VERSION=$(sed -n '/^${{ matrix.version_head }}/p' Makefile | awk -F '=' '{print $2}');
            else
              Old_PKG_VERSION=$(sed -n '${{ matrix.version_line }}p' Makefile | awk -F '=' '{print $2}');
            fi
            New_PKG_VERSION=$(${{ matrix.release_api_command }})
            echo "${{ matrix.packages }}当前版本: $Old_PKG_VERSION"
            echo "${{ matrix.packages }}最新版本: $New_PKG_VERSION"
            if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ]; then 
              echo "status=failure" >> $GITHUB_OUTPUT; 
              echo "${{ matrix.packages }}版本为最新版本$New_PKG_VERSION,无需更新"; 
            else 
              echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  
              echo "status=success" >> $GITHUB_OUTPUT;
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT;
          fi

      - name: Update ${{ matrix.packages }}
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }}
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          if [ ! -n "${{ matrix.version_line }}" ] ; then
            sed -i "/^${{ matrix.version_head }}/c\${{ matrix.version_head }}$New_PKG_VERSION" Makefile;
          else
            sed -i "${{ matrix.version_line }}c ${{ matrix.version_head }}$New_PKG_VERSION" Makefile;
          fi
          cd && cd pack && mkdir -p ${{ matrix.packages }} && cd ${{ matrix.packages }}
          wget -P / ${{ matrix.release_download_url }}$New_PKG_VERSION${{ matrix.file_name }}
          file_name=${{ matrix.file_name }}

          is_v=$(echo ${{ matrix.release_download_url }} | awk -F/ '{print $NF}')

          if [ ! -n "${{ matrix.file_name }}" ]; then PKG_HASH=$(sha256sum $is_v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}; else PKG_HASH=$(sha256sum ${file_name##*/}) && PKG_HASH=${PKG_HASH%% *}; fi;
          cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }} 
          if [ ! -n "${{ matrix.hash_line }}" ] ; then
            sed -i "/^${{ matrix.hash_head }}/c\${{ matrix.hash_head }}$PKG_HASH" Makefile;
          else
            sed -i "${{ matrix.hash_line }}c ${{ matrix.hash_head }}$PKG_HASH" Makefile;
          fi
          echo "已更新${{ matrix.packages }}版本到: $New_PKG_VERSION"
          echo "${{ matrix.packages }} Hash:$PKG_HASH"
          cd && cd pack
          echo ":white_check_mark: ${{ matrix.packages }}: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

          cd && cd $GITHUB_WORKSPACE
          echo "branch_exists=$(git ls-remote --heads origin patches-${{ matrix.packages }}-$New_PKG_VERSION | tr -d '\n')" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: cpr
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && steps.update.outputs.branch_exists == '' && !cancelled()
        uses: peter-evans/create-pull-request@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "${{ matrix.packages }}: update to ${{ steps.update.outputs.version }}"
          committer: action <actions@github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: patches-${{ matrix.packages }}-${{ steps.update.outputs.version }}
          base: main
          delete-branch: true
          body: |
            ${{ matrix.packages }}: update to ${{ steps.update.outputs.version }}
          title: "${{ matrix.packages }}: update to ${{ steps.update.outputs.version }}"
          labels: |
            automated-pr
          draft: false
