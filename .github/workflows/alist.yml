name: "alist & adguardhome"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: "0 */8 * * *"
env:
  TZ: Asia/Shanghai

jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          sudo timedatectl set-timezone "$TZ"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
        
      - name: SSH connection to Actions
        uses: kenzok78/ssh-action@master
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

  # 执行alist相关包
  job_auto_update_alist:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-alist
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Update alist
        run: |
          cd $GITHUB_WORKSPACE/alist
          Old_PKG_VERSION=$(sed -n '10p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(curl -sL "https://api.github.com/repos/AlistGo/alist/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          
          echo "alist当前版本: $Old_PKG_VERSION"
          echo "alist最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" != "$New_PKG_VERSION" ]; then
            echo "更新alist到版本: $New_PKG_VERSION"
            sed -i "10c PKG_VERSION:=$New_PKG_VERSION" Makefile
            
            cd ~/pack && mkdir -p alist && cd alist
            wget https://codeload.github.com/AlistGo/alist/tar.gz/v$New_PKG_VERSION
            PKG_HASH=$(sha256sum v$New_PKG_VERSION | awk '{print $1}')
            
            cd $GITHUB_WORKSPACE/alist
            sed -i "16c PKG_HASH:=$PKG_HASH" Makefile
            echo "ALIST_UPDATED=true" >> $GITHUB_ENV
            echo "ALIST_VERSION=$New_PKG_VERSION" >> $GITHUB_ENV
          else
            echo "alist版本为最新版本,无需更新"
            echo "ALIST_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Update alist-web
        run: |
          sleep 1
          cd $GITHUB_WORKSPACE/alist
          Old_WEB_VERSION=$(sed -n '11p' Makefile | awk -F '=' '{print $2}')
          New_WEB_VERSION=$(curl -sL "https://api.github.com/repos/AlistGo/alist-web/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
          
          echo "alist-web当前版本: $Old_WEB_VERSION"
          echo "alist-web最新版本: $New_WEB_VERSION"
          
          if [ "$Old_WEB_VERSION" != "$New_WEB_VERSION" ]; then
            echo "更新alist-web到版本: $New_WEB_VERSION"
            sed -i "11c PKG_WEB_VERSION:=$New_WEB_VERSION" Makefile
            
            cd ~/pack && mkdir -p alist-web && cd alist-web
            wget https://github.com/AlistGo/alist-web/releases/download/$New_WEB_VERSION/dist.tar.gz
            WEB_HASH=$(sha256sum dist.tar.gz | awk '{print $1}')
            
            cd $GITHUB_WORKSPACE/alist
            sed -i "26c   HASH:=$WEB_HASH" Makefile
            echo "ALIST_WEB_UPDATED=true" >> $GITHUB_ENV
            echo "ALIST_WEB_VERSION=$New_WEB_VERSION" >> $GITHUB_ENV
          else
            echo "alist-web版本为最新版本,无需更新"
            echo "ALIST_WEB_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push alist Changes
        if: env.ALIST_UPDATED == 'true' || env.ALIST_WEB_UPDATED == 'true'
        run: |
          cd $GITHUB_WORKSPACE
          
          # 配置git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # Pull latest changes first to avoid conflicts
          git pull origin main
          
          # 检查是否有变更
          if [ -n "$(git status --porcelain)" ]; then
            echo "检测到alist相关文件变更，准备提交..."
            git add alist/Makefile
            
            # 生成提交信息
            commit_msg=""
            if [ "$ALIST_UPDATED" = "true" ] && [ "$ALIST_WEB_UPDATED" = "true" ]; then
              commit_msg="alist: update to $ALIST_VERSION, alist-web: update to $ALIST_WEB_VERSION"
            elif [ "$ALIST_UPDATED" = "true" ]; then
              commit_msg="alist: update to $ALIST_VERSION"
            elif [ "$ALIST_WEB_UPDATED" = "true" ]; then
              commit_msg="alist-web: update to $ALIST_WEB_VERSION"
            fi
            
            git commit -m "$commit_msg"
            
            # Retry push with pull in case of conflicts
            for i in {1..3}; do
              if git push origin main; then
                echo "✅ 已成功提交并推送alist更改: $commit_msg"
                break
              else
                echo "Push failed, attempt $i/3. Pulling and retrying..."
                git pull origin main --rebase
                if [ $i -eq 3 ]; then
                  echo "❌ Failed to push after 3 attempts"
                  exit 1
                fi
              fi
            done
          else
            echo "没有检测到alist相关文件变更"
          fi

  # 执行adguardhome相关包
  job_auto_update_adguardhome:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-adguardhome
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Update adguardhome
        run: |
          cd $GITHUB_WORKSPACE/adguardhome
          Old_PKG_VERSION=$(sed -n '9p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(curl -sL "https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          
          echo "adguardhome当前版本: $Old_PKG_VERSION"
          echo "adguardhome最新版本: $New_PKG_VERSION"
          
          UPDATED=false
          
          # 更新主程序版本和hash
          if [ "$Old_PKG_VERSION" != "$New_PKG_VERSION" ]; then
            echo "更新adguardhome到版本: $New_PKG_VERSION"
            sed -i "9c PKG_VERSION:=$New_PKG_VERSION" Makefile
            
            cd ~/pack && mkdir -p adguardhome && cd adguardhome
            wget https://codeload.github.com/AdguardTeam/AdGuardHome/tar.gz/v$New_PKG_VERSION
            PKG_HASH=$(sha256sum v$New_PKG_VERSION | awk '{print $1}')
            
            cd $GITHUB_WORKSPACE/adguardhome
            sed -i "14c PKG_HASH:=$PKG_HASH" Makefile
            UPDATED=true
          fi
          
          # 更新frontend hash (使用最新版本号)
          cd ~/pack && mkdir -p adguardhome-frontend && cd adguardhome-frontend
          rm -f AdGuardHome_frontend.tar.gz
          wget https://github.com/AdguardTeam/AdGuardHome/releases/download/v$New_PKG_VERSION/AdGuardHome_frontend.tar.gz
          FRONTEND_HASH=$(sha256sum AdGuardHome_frontend.tar.gz | awk '{print $1}')
          
          cd $GITHUB_WORKSPACE/adguardhome
          Old_FRONTEND_HASH=$(sed -n '61p' Makefile | sed 's/.*HASH:=\([a-f0-9]*\).*/\1/')
          
          if [ "$Old_FRONTEND_HASH" != "$FRONTEND_HASH" ]; then
            echo "更新adguardhome-frontend hash: $Old_FRONTEND_HASH -> $FRONTEND_HASH"
            sed -i "61s/HASH:=.*/HASH:=$FRONTEND_HASH/" Makefile
            UPDATED=true
          fi
          
          if [ "$UPDATED" = "true" ]; then
            echo "ADGUARD_UPDATED=true" >> $GITHUB_ENV
            echo "ADGUARD_VERSION=$New_PKG_VERSION" >> $GITHUB_ENV
          else
            echo "adguardhome无需更新"
            echo "ADGUARD_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push adguardhome Changes
        if: env.ADGUARD_UPDATED == 'true'
        run: |
          cd $GITHUB_WORKSPACE
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git pull origin main
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "提交adguardhome更改..."
            git add adguardhome/Makefile
            git commit -m "adguardhome: update to $ADGUARD_VERSION"
            
            for i in {1..3}; do
              if git push origin main; then
                echo "✅ 成功推送adguardhome更改"
                break
              else
                echo "推送失败，重试 $i/3"
                git pull origin main --rebase
                if [ $i -eq 3 ]; then
                  echo "❌ 推送失败"
                  exit 1
                fi
              fi
            done
          fi

  # 执行v2raya相关包
  job_auto_update_v2raya:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-v2raya
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Update v2raya
        run: |
          cd $GITHUB_WORKSPACE/v2raya
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(curl -sL "https://api.github.com/repos/v2rayA/v2rayA/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          
          echo "v2raya当前版本: $Old_PKG_VERSION"
          echo "v2raya最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" != "$New_PKG_VERSION" ]; then
            echo "更新v2raya到版本: $New_PKG_VERSION"
            sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
            
            cd ~/pack && mkdir -p v2raya && cd v2raya
            wget https://codeload.github.com/v2rayA/v2rayA/tar.gz/v$New_PKG_VERSION
            PKG_HASH=$(sha256sum v$New_PKG_VERSION | awk '{print $1}')
            
            cd $GITHUB_WORKSPACE/v2raya
            sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
            echo "V2RAYA_UPDATED=true" >> $GITHUB_ENV
            echo "V2RAYA_VERSION=$New_PKG_VERSION" >> $GITHUB_ENV
          else
            echo "v2raya版本为最新版本,无需更新"
            echo "V2RAYA_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Update v2raya-web
        run: |
          sleep 1
          cd $GITHUB_WORKSPACE/v2raya
          # v2raya-web的版本号与v2raya相同，从同一release获取
          New_WEB_VERSION=$(curl -sL "https://api.github.com/repos/v2rayA/v2rayA/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          
          echo "v2raya-web检查版本: $New_WEB_VERSION"
          
          # 下载并更新web hash
          cd ~/pack && mkdir -p v2raya-web && cd v2raya-web
          rm -f web.tar.gz
          wget https://github.com/v2rayA/v2rayA/releases/download/v$New_WEB_VERSION/web.tar.gz
          WEB_HASH=$(sha256sum web.tar.gz | awk '{print $1}')
          
          cd $GITHUB_WORKSPACE/v2raya
          Old_WEB_HASH=$(sed -n '63p' Makefile | sed 's/.*HASH:=\([a-f0-9]*\).*/\1/')
          
          echo "v2raya-web当前hash: $Old_WEB_HASH"
          echo "v2raya-web最新hash: $WEB_HASH"
          
          if [ "$Old_WEB_HASH" != "$WEB_HASH" ]; then
            echo "更新v2raya-web hash: $Old_WEB_HASH -> $WEB_HASH"
            sed -i "63s/HASH:=.*/HASH:=$WEB_HASH/" Makefile
            echo "V2RAYA_WEB_UPDATED=true" >> $GITHUB_ENV
            echo "V2RAYA_WEB_VERSION=$New_WEB_VERSION" >> $GITHUB_ENV
          else
            echo "v2raya-web hash为最新,无需更新"
            echo "V2RAYA_WEB_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push v2raya Changes
        if: env.V2RAYA_UPDATED == 'true' || env.V2RAYA_WEB_UPDATED == 'true'
        run: |
          cd $GITHUB_WORKSPACE
          
          # 配置git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # Pull latest changes first to avoid conflicts
          git pull origin main
          
          # 检查是否有变更
          if [ -n "$(git status --porcelain)" ]; then
            echo "检测到v2raya相关文件变更，准备提交..."
            git add v2raya/Makefile
            
            # 生成提交信息
            commit_msg=""
            if [ "$V2RAYA_UPDATED" = "true" ] && [ "$V2RAYA_WEB_UPDATED" = "true" ]; then
              commit_msg="v2raya: update to $V2RAYA_VERSION, v2raya-web: update hash"
            elif [ "$V2RAYA_UPDATED" = "true" ]; then
              commit_msg="v2raya: update to $V2RAYA_VERSION"
            elif [ "$V2RAYA_WEB_UPDATED" = "true" ]; then
              commit_msg="v2raya-web: update hash for version $V2RAYA_WEB_VERSION"
            fi
            
            git commit -m "$commit_msg"
            
            # Retry push with pull in case of conflicts
            for i in {1..3}; do
              if git push origin main; then
                echo "✅ 已成功提交并推送v2raya更改: $commit_msg"
                break
              else
                echo "Push failed, attempt $i/3. Pulling and retrying..."
                git pull origin main --rebase
                if [ $i -eq 3 ]; then
                  echo "❌ Failed to push after 3 attempts"
                  exit 1
                fi
              fi
            done
          else
            echo "没有检测到v2raya相关文件变更"
          fi
