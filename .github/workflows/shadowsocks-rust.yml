name: "shadowsocks-rust"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: "0 */8 * * *"
env:
  TZ: Asia/Shanghai

jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          sudo timedatectl set-timezone "$TZ"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
        
      - name: SSH connection to Actions
        uses: kenzok78/ssh-action@master
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')    

  # 串行执行所有shadowsocks-rust架构，避免同时修改同一个Makefile
  job_auto_update_shadowsocks_rust:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-shadowsocks-rust-all-arch
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Check version and update all architectures
        run: |
          cd $GITHUB_WORKSPACE/shadowsocks-rust
          
          # 检查当前版本
          Old_PKG_VERSION=$(sed -n '/^PKG_VERSION:=/p' Makefile | awk -F '=' '{print $2}')
          
          echo "获取shadowsocks-rust最新版本..."
          
          # 使用GitHub API获取最新版本
          api_response=$(curl -H "Authorization: Bearer ${{ github.token }}" -s \
            "https://api.github.com/repos/shadowsocks/shadowsocks-rust/releases")
          
          # 检查API错误
          if echo "$api_response" | jq -e '.message' >/dev/null 2>&1; then
            error_msg=$(echo "$api_response" | jq -r '.message')
            echo "❌ GitHub API错误: $error_msg"
            
            # 使用备用方法获取版本
            echo "尝试备用方法获取版本..."
            New_PKG_VERSION=$(git ls-remote --tags --refs --sort="version:refname" \
              https://github.com/shadowsocks/shadowsocks-rust.git | \
              grep -v '\^{}$' | \
              tail -1 | \
              sed 's/.*refs\/tags\/v//')
              
            if [ -z "$New_PKG_VERSION" ]; then
              echo "❌ 备用方法也失败了，退出"
              exit 1
            fi
            echo "✅ 使用备用方法获取到版本: $New_PKG_VERSION"
          else
            # 正常解析API响应
            New_PKG_VERSION=$(echo "$api_response" | jq -r '
              map(select(.prerelease == false)) |
              if length > 0 then .[0].tag_name | sub("^v"; "") else empty end
            ')
            
            if [ -z "$New_PKG_VERSION" ]; then
              echo "❌ 无法解析版本信息"
              exit 1
            fi
          fi
          
          echo "shadowsocks-rust当前版本: $Old_PKG_VERSION"
          echo "shadowsocks-rust最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" != "$New_PKG_VERSION" ]; then
            echo "检测到新版本，开始更新所有架构..."
            
            # 更新版本号
            sed -i "/^PKG_VERSION:=/c PKG_VERSION:=$New_PKG_VERSION" Makefile
            echo "SHADOWSOCKS_UPDATED=true" >> $GITHUB_ENV
            echo "SHADOWSOCKS_VERSION=$New_PKG_VERSION" >> $GITHUB_ENV
            
            # 创建下载目录
            cd ~/pack && mkdir -p shadowsocks-rust && cd shadowsocks-rust
            
            # 定义架构信息：行号、缩进、下载URL、文件名
            declare -A arch_info=(
              # 格式: "hash_line:indent:repo_owner:filename"
              [24]="2:shadowsocks:shadowsocks-v$New_PKG_VERSION.aarch64-unknown-linux-musl.tar.xz"
              [30]="4:shadowsocks:shadowsocks-v$New_PKG_VERSION.arm-unknown-linux-musleabi.tar.xz"
              [33]="4:shadowsocks:shadowsocks-v$New_PKG_VERSION.arm-unknown-linux-musleabihf.tar.xz"
              [37]="2:shadowsocks:shadowsocks-v$New_PKG_VERSION.i686-unknown-linux-musl.tar.xz"
              [40]="2:shadowsocks:shadowsocks-v$New_PKG_VERSION.x86_64-unknown-linux-musl.tar.xz"
              [43]="2:sbwml:shadowsocks-v$New_PKG_VERSION.mips-unknown-linux-musl.tar.xz"
              [46]="2:sbwml:shadowsocks-v$New_PKG_VERSION.mipsel-unknown-linux-musl.tar.xz"
            )
            
            # 处理每个架构
            for hash_line in "${!arch_info[@]}"; do
              info="${arch_info[$hash_line]}"
              IFS=':' read -r indent repo_owner filename <<< "$info"
              
              echo "处理架构文件: $filename (行号: $hash_line)"
              
              # 构建下载URL
              if [ "$repo_owner" = "shadowsocks" ]; then
                download_url="https://github.com/shadowsocks/shadowsocks-rust/releases/download/v${New_PKG_VERSION}/${filename}"
              elif [ "$repo_owner" = "sbwml" ]; then
                download_url="https://github.com/sbwml/shadowsocks-rust-mips/releases/download/v${New_PKG_VERSION}/${filename}"
              fi
              
              echo "下载URL: $download_url"
              
              # 下载文件
              if wget -q --timeout=30 "$download_url"; then
                if [ -f "$filename" ] && [ -s "$filename" ]; then
                  # 计算哈希
                  PKG_HASH=$(sha256sum "$filename" | awk '{print $1}')
                  echo "$filename 哈希值: $PKG_HASH"
                  
                  # 根据缩进格式更新哈希
                  cd $GITHUB_WORKSPACE/shadowsocks-rust
                  if [ "$indent" = "2" ]; then
                    sed -i "${hash_line}c\  PKG_HASH:=$PKG_HASH" Makefile
                  elif [ "$indent" = "4" ]; then
                    sed -i "${hash_line}c\    PKG_HASH:=$PKG_HASH" Makefile
                  fi
                  
                  cd ~/pack/shadowsocks-rust
                  echo "✅ $filename 处理成功"
                else
                  echo "❌ 下载的文件为空或不存在: $filename"
                fi
              else
                echo "❌ 下载失败: $filename"
              fi
            done
            
            echo "架构文件哈希更新完成"
          else
            echo "shadowsocks-rust版本为最新版本,无需更新"
            echo "SHADOWSOCKS_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push shadowsocks-rust Changes
        if: env.SHADOWSOCKS_UPDATED == 'true'
        run: |
          cd $GITHUB_WORKSPACE
          
          # 配置git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # 检查是否有变更
          if [ -n "$(git status --porcelain)" ]; then
            echo "检测到shadowsocks-rust文件变更，准备提交..."
            git add shadowsocks-rust/Makefile
            git commit -m "shadowsocks-rust: update to $SHADOWSOCKS_VERSION"
            git push origin main
            echo "✅ 已成功提交并推送 shadowsocks-rust 更改到版本 $SHADOWSOCKS_VERSION"
          else
            echo "没有检测到shadowsocks-rust文件变更"
          fi
