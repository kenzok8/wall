name: "naiveproxy"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: "0 */8 * * *"
env:
  TZ: Asia/Shanghai

jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          sudo timedatectl set-timezone "$TZ"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
        
      - name: SSH connection to Actions
        uses: kenzok78/ssh-action@master
        if: (github.event.inputs.ssh == 'false' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

  # 串行执行所有naiveproxy架构，避免同时修改同一个Makefile
  job_auto_update_naiveproxy:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: update-naiveproxy-all-arch
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          cd && mkdir -p pack && cd pack
          sudo timedatectl set-timezone "$TZ"

      - name: Check version and update all architectures
        run: |
          cd $GITHUB_WORKSPACE/naiveproxy
          
          # 检查版本
          Old_PKG_VERSION=$(sed -n '/^PKG_VERSION:=/p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(curl -sL "https://api.github.com/repos/klzgrad/naiveproxy/releases" | jq -r 'map(select(.prerelease == false)) | first | .tag_name' | sed -e 's/.*v//')
          
          echo "naiveproxy当前版本: $Old_PKG_VERSION"
          echo "naiveproxy最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" != "$New_PKG_VERSION" ]; then
            echo "检测到新版本，开始更新所有架构..."
            
            # 更新版本号
            sed -i "/^PKG_VERSION:=/c PKG_VERSION:=$New_PKG_VERSION" Makefile
            echo "NAIVEPROXY_UPDATED=true" >> $GITHUB_ENV
            echo "NAIVEPROXY_VERSION=$New_PKG_VERSION" >> $GITHUB_ENV
            
            # 创建下载目录
            cd ~/pack && mkdir -p naiveproxy && cd naiveproxy
            
            # 定义所有架构和对应的哈希行及文件名
            declare -A arch_files=(
              [23]="naiveproxy-v$New_PKG_VERSION-openwrt-aarch64_cortex-a53.tar.xz"
              [25]="naiveproxy-v$New_PKG_VERSION-openwrt-aarch64_cortex-a72.tar.xz"
              [27]="naiveproxy-v$New_PKG_VERSION-openwrt-aarch64_generic.tar.xz"
              [29]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_arm1176jzf-s_vfp.tar.xz"
              [31]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_arm926ej-s.tar.xz"
              [33]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a15_neon-vfpv4.tar.xz"
              [35]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a5_vfpv4.tar.xz"
              [37]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a7.tar.xz"
              [39]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a7_neon-vfpv4.tar.xz"
              [41]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a7_vfpv4.tar.xz"
              [43]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a8_vfpv3.tar.xz"
              [45]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a9.tar.xz"
              [47]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a9_neon.tar.xz"
              [49]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_cortex-a9_vfpv3-d16.tar.xz"
              [51]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_mpcore.tar.xz"
              [53]="naiveproxy-v$New_PKG_VERSION-openwrt-arm_xscale.tar.xz"
              [55]="naiveproxy-v$New_PKG_VERSION-openwrt-mipsel_24kc.tar.xz"
              [57]="naiveproxy-v$New_PKG_VERSION-openwrt-mipsel_mips32.tar.xz"
              [59]="naiveproxy-v$New_PKG_VERSION-openwrt-riscv64.tar.xz"
              [61]="naiveproxy-v$New_PKG_VERSION-openwrt-x86.tar.xz"
              [63]="naiveproxy-v$New_PKG_VERSION-openwrt-x86_64.tar.xz"
            )
            
            # 下载所有文件并计算哈希
            for hash_line in "${!arch_files[@]}"; do
              file_name="${arch_files[$hash_line]}"
              echo "处理架构文件: $file_name (行号: $hash_line)"
              
              # 下载文件
              wget -q "https://github.com/klzgrad/naiveproxy/releases/download/v$New_PKG_VERSION/$file_name"
              
              if [ -f "$file_name" ]; then
                # 计算哈希
                PKG_HASH=$(sha256sum "$file_name" | awk '{print $1}')
                echo "$file_name 哈希值: $PKG_HASH"
                
                # 更新对应行的哈希 (所有架构都使用2个空格缩进)
                cd $GITHUB_WORKSPACE/naiveproxy
                sed -i "${hash_line}c\  PKG_HASH:=$PKG_HASH" Makefile
                
                cd ~/pack/naiveproxy
              else
                echo "警告: 无法下载文件 $file_name"
              fi
            done
            
            echo "所有架构文件哈希更新完成"
          else
            echo "naiveproxy版本为最新版本,无需更新"
            echo "NAIVEPROXY_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push naiveproxy Changes
        if: env.NAIVEPROXY_UPDATED == 'true'
        run: |
          cd $GITHUB_WORKSPACE
          
          # 配置git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # 检查是否有变更
          if [ -n "$(git status --porcelain)" ]; then
            echo "检测到naiveproxy文件变更，准备提交..."
            git add naiveproxy/Makefile
            git commit -m "naiveproxy: update to $NAIVEPROXY_VERSION"
            git push origin main
            echo "✅ 已成功提交并推送 naiveproxy 更改到版本 $NAIVEPROXY_VERSION"
          else
            echo "没有检测到naiveproxy文件变更"
          fi
